# Default values for mattermost-team-edition.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: mattermost/mattermost-team-edition
  tag: 5.0.0

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
## ref: https://docs.gitlab.com/ee/install/requirements.html#storage
##
persistence:
  ## This volume persists generated data from users, like images, attachments...
  ##
  data:
    enabled: true
    size: 10Gi
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:
    accessMode: ReadWriteOnce
  ## This volume is used to store git data and other project files.
  ## ref: https://docs.gitlab.com/omnibus/settings/configuration.html#storing-git-data-in-an-alternative-directory
  ##

# Mattermost configuration:
config:
  SiteUrl: "http://mattermost.example.com"
  SiteName: "Mattermost"
  FilesAccessKey:
  FilesSecretKey:
  FileBucketName:
  SMTPServer:
  SMTPPort:
  # empty, TLS, or STARTTLS
  SMTPConnection:
  SMTPUsername:
  SMTPPassword:
  FeedbackEmail:
  FeedbackName:

service:
  type: ClusterIP
  externalPort: 8065
  internalPort: 8065

ingress:
  enabled: false
  path: /
  hosts:
    - mattermost.example.com
  tls:
    # - secretName: mattermost.example.com-tls
    #   hosts:
    #     - mattermost.example.com

auth:
  # gitlab:
  #   Enable: "true"
  #   Secret: ""
  #   Id: ""
  #   Scope: ""
  #   AuthEndpoint:
  #   TokenEndpoint:
  #   UserApiEndpoint:

## If use this please disable the mysql chart, setting the config mysql.enable to false
externalDB:
  enabled: false
  # externalDriverType: "postgres" #or mysql
  # externalConnectionString: "postgres://<USERNAME>:<PASSWORD>@<HOST>:5432/<DATABASE_NAME>?sslmode=disable&connect_timeout=10"
  # for mysql: "<USERNAME>:<PASSWORD>@tcp(<HOST>:3306)/<DATABASE_NAME>?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s"

mysql:
  enabled: true
  mysqlRootPassword: root_password
  mysqlUser: mmuser
  mysqlPassword: mmpasswd
  mysqlDatabase: mattermost

  repository: mysql
  tag: 5.7
  imagePullPolicy: Always

  persistence:
    enabled: true
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
  # existingClaim: ""

kube-lego:
  enabled: false
  config:
    # Replace this email with the one for registering your SSL cert
    LEGO_EMAIL: someone@example.com
    # Defaults to the staging environment, update to https://acme-v01.api.letsencrypt.org/directory for production
    LEGO_URL: https://acme-staging.api.letsencrypt.org/directory
  rbac:
    # Set to true if your Kubernetes cluster has RBAC enabled
    create: false

nginx-ingress:
  enabled: false
  controller:
    config:
      http-snippet: |
        proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;
  rbac:
    # Set to true if your Kubernetes cluster has RBAC enabled
    create: false
